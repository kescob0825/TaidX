plugins {
    // id "com.github.spotbugs" version "4.5.1"
    // id "checkstyle"
  id 'java'
  id 'application'
}

// Gradle wrapper configuration
wrapper {
    gradleVersion = '7.5'
    distributionType = Wrapper.DistributionType.BIN
}

// Java configuration
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(18))
        }
    }

// Compiler options
    compileJava {
        options.encoding = 'UTF-8'
    }

// Repositories and dependencies for code go here
repositories {
  mavenCentral()
}

// Dependencies
    dependencies {
        // HTTP and JSON handling
        implementation 'com.squareup.okhttp3:okhttp:4.12.0'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
        implementation 'org.json:json:20250107'

        // XML handling
        implementation 'xom:xom:1.3.9'
        implementation('xerces:xercesImpl:2.12.2'){
            exclude group: 'xml-apis', module: 'xml-apis'
        }
        implementation('net.sourceforge.nekohtml:nekohtml:1.9.22') {
            exclude group: 'xml-apis', module: 'xml-apis'
        }
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    }

// Test configuration
    /*test {
        useJUnitPlatform()
    }*/

tasks.register('runMain', JavaExec) {
    group = 'Application'
    description = 'Runs the main class'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('memoranda.Start')

    // Add any additional configuration from taiga-api if needed
    doFirst {
        // Any setup that needs to happen before execution
        println "Starting Memoranda application..."
    }
}

// Fat JAR configuration for packaging the application
tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    archiveBaseName.set('jdlafond_ruebezahl')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}


///////////////////////////////////////////////////////////////////////
// Configure Checkstyle
/////////////////////////////////////////////////////////////////////
// apply plugin: 'checkstyle'
// checkstyle {
//   // Keep checkstyle a little quieter
//   ignoreFailures = true
//   showViolations = false
// }

// tasks.withType(Checkstyle) {
  
//   reports {
//     html.enabled = true
//     xml.enabled = false
//   }
//   // include '**/*.java'
//   include '**/ui/App.java'
//  }

// checkstyle {
//     toolVersion = "8.8"
// }


///////////////////////////////////////////////////////////////////////
// Configure SpotBugs
///////////////////////////////////////////////////////////////////////
// To generate an HTML report instead of XML
// spotbugsMain {
//     reports {
//         xml.enabled = false
//         html.enabled = true
//     }
// }
// spotbugs {
//     toolVersion = '4.2.2'
//     ignoreFailures = true
//     showProgress = true
//     effort = 'max'
// }
