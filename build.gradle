plugins {
    // Uncomment and use these plugins if needed
    id 'com.github.spotbugs' version '5.0.13'
    id 'checkstyle'
    id 'java'
    id 'application'
    id "jacoco"
}

// Basic project configuration
application {
    mainClass = 'memoranda.Start'
}

// Gradle wrapper configuration
wrapper {
    gradleVersion = '7.5'
    distributionType = Wrapper.DistributionType.BIN
}

// Java configuration
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(18))
        }
    }

// Compiler options
    compileJava {
        options.encoding = 'UTF-8'
    }

// Repository configuration
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }


// Dependencies
    dependencies {
        // https://mvnrepository.com/artifact/com.formdev/flatlaf
        implementation group: 'com.formdev', name: 'flatlaf', version: '3.5.4'
        // https://mvnrepository.com/artifact/com.formdev/flatlaf-extras
        implementation group: 'com.formdev', name: 'flatlaf-extras', version: '3.5.4'
        implementation 'com.formdev:flatlaf-intellij-themes:3.5.4'
        // HTTP and JSON handling
        implementation 'com.squareup.okhttp3:okhttp:4.12.0'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
        implementation 'org.json:json:20250107'
        implementation 'com.google.code.gson:gson:2.12.1'

        // XML handling
        implementation 'xom:xom:1.3.9'
        implementation('xerces:xercesImpl:2.12.2'){
            exclude group: 'xml-apis', module: 'xml-apis'
        }
        implementation('net.sourceforge.nekohtml:nekohtml:1.9.22') {
            exclude group: 'xml-apis', module: 'xml-apis'
        }
        // https://mvnrepository.com/artifact/com.google.inject/guice
        implementation group: 'com.google.inject', name: 'guice', version: '7.0.0'
        // https://mvnrepository.com/artifact/com.google.inject.extensions/guice-assistedinject
        implementation group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '7.0.0'
        implementation 'org.apache.commons:commons-lang3:3.12.0'

        //Testing Section
        implementation 'com.puppycrawl.tools:checkstyle:10.20.0'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
        // https://mvnrepository.com/artifact/org.mockito/mockito-core
        testImplementation 'org.mockito:mockito-core:5.15.2'
        // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
        testImplementation 'org.mockito:mockito-junit-jupiter:5.15.2'


    }

// Test configuration
test {
    useJUnitPlatform()
    include '**/*Test.class'
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // Exclude getters and setters
                    '**/**/get*',
                    '**/**/set*',
                    '**/**/is*',
                    //Exclude classes we are not implementing
                    '**/model/**',
                    '**/util/**',
                    '**/ui/**',
                    '**/date/**'
            ])
        }))
    }
}
jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

tasks.register('runMain', JavaExec) {
    group = 'Application'
    description = 'Runs the main class'
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('memoranda.Start')

    // Add any additional configuration from taiga-api if needed
    doFirst {
        // Any setup that needs to happen before execution
        println "Starting Memoranda application..."
    }
}

// Fat JAR configuration for packaging the application
tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    archiveBaseName.set('ruebezahl_spring25')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

checkstyle {
    // Keep checkstyle a little quieter
    ignoreFailures = true
    showViolations = false
    toolVersion = "10.20.0"
    configFile = file("config/checkstyle/sun_checks.xml")
    configProperties = [
            "checkstyle.suppressions.file" : file("config/checkstyle/suppressions.xml")
    ]
}

///////////////////////////////////////////////////////////////////////
// Configure Checkstyle
///////////////////////////////////////////////////////////////////////
tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
        html.outputLocation.set(project.layout.buildDirectory.file("reports/checkstyle/${name}.html"))
    }
}


///////////////////////////////////////////////////////////////////////
// Configure SpotBugs
///////////////////////////////////////////////////////////////////////
// To generate an HTML report instead of XML
spotbugs {
    toolVersion = '4.8.4'
    ignoreFailures = true
    effort = 'max'        // min, default, or max
    reportLevel = 'medium' // low, medium, or high
}
tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
    reports{
        html.required.set(true)
        html.outputLocation.set(project.layout.buildDirectory.file("reports/spotbugs/${name}.html"))
    }
}
